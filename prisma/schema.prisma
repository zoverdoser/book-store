// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  points    Int      @default(0)
  role      String   @default("USER")
  status    String   @default("ACTIVE")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  uploads   UserUpload[]
  pointHistory UserPointHistory[]
  notifications Notification[]
  /// 多对一关系：自动维护的反向引用
  downloads  BookDownload[]
}

model VerificationCode {
  id        String   @id @default(cuid())
  email     String   @unique
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
}

model Book {
  id          String   @id @default(cuid())
  title       String
  description String?
  cover       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  /// 多对多关系：需要手动维护的关联
  categories  Category[]
  /// 多对多关系：需要手动维护的关联
  tags        Tag[]
  /// 多对多关系：需要手动维护的关联
  authors     Author[]
  /// 多对一关系：自动维护的反向引用
  uploads     UserUpload[]
  /// 多对一关系：自动维护的反向引用
  pointHistory UserPointHistory[]
  /// 多对一关系：自动维护的反向引用
  downloads   BookDownload[]
}

model UserUpload {
  id            Int      @id @default(autoincrement())
  userId        Int
  /// 一对一关系：自动维护的关联
  bookId        String
  fileHash      String
  filePath      String
  fileType      String
  status        String   @default("PENDING")
  rejectReason  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  /// 一对一关系：自动维护的关联
  user          User     @relation(fields: [userId], references: [id])
  /// 一对一关系：自动维护的关联
  book          Book     @relation(fields: [bookId], references: [id])
}

model Author {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  /// 多对多关系：自动维护的反向引用
  books       Book[]
}

model Category {
  id    String @id @default(cuid())
  name  String
  /// 多对多关系：自动维护的反向引用
  books Book[]
}

model Tag {
  id    String @id @default(cuid())
  name  String
  /// 多对多关系：自动维护的反向引用
  books Book[]
}

model UserPointHistory {
  id        Int      @id @default(autoincrement())
  userId    Int
  points    Int
  type      String
  /// 一对一关系：自动维护的关联
  bookId    String?
  createdAt DateTime @default(now())
  /// 一对一关系：自动维护的关联
  user      User     @relation(fields: [userId], references: [id])
  /// 一对一关系：自动维护的关联
  book      Book?    @relation(fields: [bookId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  type      String
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  /// 一对一关系：自动维护的关联
  user      User     @relation(fields: [userId], references: [id])
}

model BookDownload {
  id        Int      @id @default(autoincrement())
  bookId    String
  userId    Int
  createdAt DateTime @default(now())
  /// 一对一关系：自动维护的关联
  book      Book     @relation(fields: [bookId], references: [id])
  /// 一对一关系：自动维护的关联
  user      User     @relation(fields: [userId], references: [id])

  @@index([bookId])
  @@index([userId])
}
